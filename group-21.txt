1abb8078
9
File structure make the structure obvious
Smart devide into primary and backup, and let its client relate to both
Main file should not be only function call
Good naming, in ...Main, easy to see functionality in select statement
Everything happens from the perspective of this select case, very easy to follow
Great coherence and completeness, modules seems to do exactly what it is supposed to
Alsmost every function is pure, doing what it is supposed to (maybe except event_primaryAlive)
Very easy to follow structure, and relatively easy to follow
Naming smart with event, but some comments to maintain
Sometimes switching between camelCase and snake_case is arbitrary

09a72ca3
6
Very hard to understand where the entry point is, no main file or readme documenting understand. 
Seems like the directory is not complete, files are missing (motor.go for example). This impacts tracability and direction of information.
Very hard to find the execution flow, i.e. only function declarations in executions
The way is is built does not makes scense, any dependencies very inertviened
Somewhat easy to see that it is P2P, but other things are hard to see, i.e. how orders get assigned
Naming are not too bad, but some names as handleOrder() does not describe what it actually does

13e229e2
Easy to see connected componets in run_master_backup(), the overview is always updated on new events
By calling the process pair functionality master backup, in addition to the project having remnants of master-slave functionality, the project looks like a master-slave system at first glance, rather than peer-to-peer.
