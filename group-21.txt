1abb8078
9
File structure make the structure obvious
Smart devide into primary and backup, and let its client relate to both
Main file should not be only function call
Good naming, in ...Main, easy to see functionality in select statement
Everything happens from the perspective of this select case, very easy to follow
Great coherence and completeness, modules seems to do exactly what it is supposed to
Alsmost every function is pure, doing what it is supposed to (maybe except event_primaryAlive)
Very easy to follow structure, and relatively easy to follow
Naming smart with event, but some comments to maintain
Sometimes switching between camelCase and snake_case is arbitrary

09a72ca3
6
Very hard to understand where the entry point is, no main file or readme documenting understand. 
Seems like the directory is not complete, files are missing (motor.go for example). This impacts tracability and direction of information.
Very hard to find the execution flow, i.e. only function declarations in executions
The way is is built does not makes scense, any dependencies very inertviened
Somewhat easy to see that it is P2P, but other things are hard to see, i.e. how orders get assigned
Naming are not too bad, but some names as handleOrder() does not describe what it actually does

13e229e2
7
Easy to see connected componets in run_master_backup(), the overview is always updated on new events.
By calling the process pair functionality master backup, in addition to the project having remnants of master-slave functionality, the project looks like a master-slave system at first glance, rather than peer-to-peer.The module deviding is done well, but could be done more in Run() function, more layers of abstraction could be added.
Easy to see from the outside how to use most of the functions in the modules
Functions are pure, and all changes made to states are done in Run(), easy to track information flow
Apart from Run() easy follow the code
Only two layers and Run() using modles makes the flow of information easy traceable

637c9689
8
Not easy to see how modules are connected, and overall how they have structured their program
Somewhat easy to find functionality, but primary-backup trasitions could be clearer
Modules appears to deal with only one subject, but sometimes wrong subject, i.e. udp.go
Hard to keep track of state changes, as many functions are non-pure
Code is easy to follow
No central control makes flow of information hard to track
Good naming of functions with prefix describing the functionality, but sometimes too much?

a21c5c32
9
Easy to get good overview of the project and how modules are connected.
Modules appear to do one thing and only what it should
Some functions are global, even if they dont need to
There are functions that is not pure
Very easy to follow the code and what it executes, extensive select-case statements makes it easy
A lot of comments, maybe too much and sometimes repetition of code

dda72102
7
Key point: could be split into more modules, and make them less dependent of each other
Functionality is okey after having read readme.md, but could have been better. Readme provides insight into conventions and functionality, however this should be more self-explanatory
Modules (node, elevator) only do things realted to its respective tasks
The two modules are also very complete, and has no signs of lack of functionality
Tracability and direction is okay, but suffers from design choice
Naming and comments useful and easy to maintain
Code sometimes hard to follow, i.e. in F_RunNode()